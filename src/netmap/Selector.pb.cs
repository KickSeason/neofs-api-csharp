// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: selector.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Netmap {

  /// <summary>Holder for reflection information generated from selector.proto</summary>
  public static partial class SelectorReflection {

    #region Descriptor
    /// <summary>File descriptor for selector.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SelectorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5zZWxlY3Rvci5wcm90bxIGbmV0bWFwGi1naXRodWIuY29tL2dvZ28vcHJv",
            "dG9idWYvZ29nb3Byb3RvL2dvZ28ucHJvdG8iTAoNUGxhY2VtZW50UnVsZRIS",
            "CgpSZXBsRmFjdG9yGAEgASgNEicKCFNGR3JvdXBzGAIgAygLMg8ubmV0bWFw",
            "LlNGR3JvdXBCBMjeHwAiagoHU0ZHcm91cBIlCgdGaWx0ZXJzGAEgAygLMg4u",
            "bmV0bWFwLkZpbHRlckIEyN4fABInCglTZWxlY3RvcnMYAiADKAsyDi5uZXRt",
            "YXAuU2VsZWN0QgTI3h8AEg8KB0V4Y2x1ZGUYAyADKA0iJAoGU2VsZWN0Eg0K",
            "BUNvdW50GAEgASgNEgsKA0tleRgCIAEoCSI8Cg1TaW1wbGVGaWx0ZXJzEisK",
            "B0ZpbHRlcnMYASADKAsyFC5uZXRtYXAuU2ltcGxlRmlsdGVyQgTI3h8AIm4K",
            "DFNpbXBsZUZpbHRlchIdCgJPcBgBIAEoDjIRLm5ldG1hcC5PcGVyYXRpb24S",
            "DwoFVmFsdWUYAiABKAlIABImCgVGQXJncxgDIAEoCzIVLm5ldG1hcC5TaW1w",
            "bGVGaWx0ZXJzSABCBgoEQXJncyI2CgZGaWx0ZXISCwoDS2V5GAEgASgJEh8K",
            "AUYYAiABKAsyFC5uZXRtYXAuU2ltcGxlRmlsdGVyKlQKCU9wZXJhdGlvbhIG",
            "CgJOUBAAEgYKAkVREAESBgoCTkUQAhIGCgJHVBADEgYKAkdFEAQSBgoCTFQQ",
            "BRIGCgJMRRAGEgYKAk9SEAcSBwoDQU5EEAgqHwoEVHlwZRIKCgZTdHJpbmcQ",
            "ABILCgdJbnRlZ2VyEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Netmap.Operation), typeof(global::Netmap.Type), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.PlacementRule), global::Netmap.PlacementRule.Parser, new[]{ "ReplFactor", "SFGroups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.SFGroup), global::Netmap.SFGroup.Parser, new[]{ "Filters", "Selectors", "Exclude" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.Select), global::Netmap.Select.Parser, new[]{ "Count", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.SimpleFilters), global::Netmap.SimpleFilters.Parser, new[]{ "Filters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.SimpleFilter), global::Netmap.SimpleFilter.Parser, new[]{ "Op", "Value", "FArgs" }, new[]{ "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Netmap.Filter), global::Netmap.Filter.Parser, new[]{ "Key", "F" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Operation {
    [pbr::OriginalName("NP")] Np = 0,
    [pbr::OriginalName("EQ")] Eq = 1,
    [pbr::OriginalName("NE")] Ne = 2,
    [pbr::OriginalName("GT")] Gt = 3,
    [pbr::OriginalName("GE")] Ge = 4,
    [pbr::OriginalName("LT")] Lt = 5,
    [pbr::OriginalName("LE")] Le = 6,
    [pbr::OriginalName("OR")] Or = 7,
    [pbr::OriginalName("AND")] And = 8,
  }

  public enum Type {
    [pbr::OriginalName("String")] String = 0,
    [pbr::OriginalName("Integer")] Integer = 1,
  }

  #endregion

  #region Messages
  public sealed partial class PlacementRule : pb::IMessage<PlacementRule> {
    private static readonly pb::MessageParser<PlacementRule> _parser = new pb::MessageParser<PlacementRule>(() => new PlacementRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlacementRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlacementRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlacementRule(PlacementRule other) : this() {
      replFactor_ = other.replFactor_;
      sFGroups_ = other.sFGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlacementRule Clone() {
      return new PlacementRule(this);
    }

    /// <summary>Field number for the "ReplFactor" field.</summary>
    public const int ReplFactorFieldNumber = 1;
    private uint replFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplFactor {
      get { return replFactor_; }
      set {
        replFactor_ = value;
      }
    }

    /// <summary>Field number for the "SFGroups" field.</summary>
    public const int SFGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Netmap.SFGroup> _repeated_sFGroups_codec
        = pb::FieldCodec.ForMessage(18, global::Netmap.SFGroup.Parser);
    private readonly pbc::RepeatedField<global::Netmap.SFGroup> sFGroups_ = new pbc::RepeatedField<global::Netmap.SFGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Netmap.SFGroup> SFGroups {
      get { return sFGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlacementRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlacementRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplFactor != other.ReplFactor) return false;
      if(!sFGroups_.Equals(other.sFGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplFactor != 0) hash ^= ReplFactor.GetHashCode();
      hash ^= sFGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplFactor != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReplFactor);
      }
      sFGroups_.WriteTo(output, _repeated_sFGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplFactor);
      }
      size += sFGroups_.CalculateSize(_repeated_sFGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlacementRule other) {
      if (other == null) {
        return;
      }
      if (other.ReplFactor != 0) {
        ReplFactor = other.ReplFactor;
      }
      sFGroups_.Add(other.sFGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReplFactor = input.ReadUInt32();
            break;
          }
          case 18: {
            sFGroups_.AddEntriesFrom(input, _repeated_sFGroups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SFGroup : pb::IMessage<SFGroup> {
    private static readonly pb::MessageParser<SFGroup> _parser = new pb::MessageParser<SFGroup>(() => new SFGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SFGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFGroup(SFGroup other) : this() {
      filters_ = other.filters_.Clone();
      selectors_ = other.selectors_.Clone();
      exclude_ = other.exclude_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFGroup Clone() {
      return new SFGroup(this);
    }

    /// <summary>Field number for the "Filters" field.</summary>
    public const int FiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Netmap.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(10, global::Netmap.Filter.Parser);
    private readonly pbc::RepeatedField<global::Netmap.Filter> filters_ = new pbc::RepeatedField<global::Netmap.Filter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Netmap.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "Selectors" field.</summary>
    public const int SelectorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Netmap.Select> _repeated_selectors_codec
        = pb::FieldCodec.ForMessage(18, global::Netmap.Select.Parser);
    private readonly pbc::RepeatedField<global::Netmap.Select> selectors_ = new pbc::RepeatedField<global::Netmap.Select>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Netmap.Select> Selectors {
      get { return selectors_; }
    }

    /// <summary>Field number for the "Exclude" field.</summary>
    public const int ExcludeFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_exclude_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> exclude_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Exclude {
      get { return exclude_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SFGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SFGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      if(!selectors_.Equals(other.selectors_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      hash ^= selectors_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
      selectors_.WriteTo(output, _repeated_selectors_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      size += selectors_.CalculateSize(_repeated_selectors_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SFGroup other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
      selectors_.Add(other.selectors_);
      exclude_.Add(other.exclude_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 18: {
            selectors_.AddEntriesFrom(input, _repeated_selectors_codec);
            break;
          }
          case 26:
          case 24: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Select : pb::IMessage<Select> {
    private static readonly pb::MessageParser<Select> _parser = new pb::MessageParser<Select>(() => new Select());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Select> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select(Select other) : this() {
      count_ = other.count_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select Clone() {
      return new Select(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Select);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Select other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Select other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleFilters : pb::IMessage<SimpleFilters> {
    private static readonly pb::MessageParser<SimpleFilters> _parser = new pb::MessageParser<SimpleFilters>(() => new SimpleFilters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleFilters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilters(SimpleFilters other) : this() {
      filters_ = other.filters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilters Clone() {
      return new SimpleFilters(this);
    }

    /// <summary>Field number for the "Filters" field.</summary>
    public const int FiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Netmap.SimpleFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(10, global::Netmap.SimpleFilter.Parser);
    private readonly pbc::RepeatedField<global::Netmap.SimpleFilter> filters_ = new pbc::RepeatedField<global::Netmap.SimpleFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Netmap.SimpleFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleFilters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleFilters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleFilters other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleFilter : pb::IMessage<SimpleFilter> {
    private static readonly pb::MessageParser<SimpleFilter> _parser = new pb::MessageParser<SimpleFilter>(() => new SimpleFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilter(SimpleFilter other) : this() {
      op_ = other.op_;
      switch (other.ArgsCase) {
        case ArgsOneofCase.Value:
          Value = other.Value;
          break;
        case ArgsOneofCase.FArgs:
          FArgs = other.FArgs.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleFilter Clone() {
      return new SimpleFilter(this);
    }

    /// <summary>Field number for the "Op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Netmap.Operation op_ = global::Netmap.Operation.Np;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Netmap.Operation Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return argsCase_ == ArgsOneofCase.Value ? (string) args_ : ""; }
      set {
        args_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        argsCase_ = ArgsOneofCase.Value;
      }
    }

    /// <summary>Field number for the "FArgs" field.</summary>
    public const int FArgsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Netmap.SimpleFilters FArgs {
      get { return argsCase_ == ArgsOneofCase.FArgs ? (global::Netmap.SimpleFilters) args_ : null; }
      set {
        args_ = value;
        argsCase_ = value == null ? ArgsOneofCase.None : ArgsOneofCase.FArgs;
      }
    }

    private object args_;
    /// <summary>Enum of possible cases for the "Args" oneof.</summary>
    public enum ArgsOneofCase {
      None = 0,
      Value = 2,
      FArgs = 3,
    }
    private ArgsOneofCase argsCase_ = ArgsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgsOneofCase ArgsCase {
      get { return argsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArgs() {
      argsCase_ = ArgsOneofCase.None;
      args_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(FArgs, other.FArgs)) return false;
      if (ArgsCase != other.ArgsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != global::Netmap.Operation.Np) hash ^= Op.GetHashCode();
      if (argsCase_ == ArgsOneofCase.Value) hash ^= Value.GetHashCode();
      if (argsCase_ == ArgsOneofCase.FArgs) hash ^= FArgs.GetHashCode();
      hash ^= (int) argsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != global::Netmap.Operation.Np) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (argsCase_ == ArgsOneofCase.Value) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (argsCase_ == ArgsOneofCase.FArgs) {
        output.WriteRawTag(26);
        output.WriteMessage(FArgs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != global::Netmap.Operation.Np) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (argsCase_ == ArgsOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (argsCase_ == ArgsOneofCase.FArgs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FArgs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleFilter other) {
      if (other == null) {
        return;
      }
      if (other.Op != global::Netmap.Operation.Np) {
        Op = other.Op;
      }
      switch (other.ArgsCase) {
        case ArgsOneofCase.Value:
          Value = other.Value;
          break;
        case ArgsOneofCase.FArgs:
          if (FArgs == null) {
            FArgs = new global::Netmap.SimpleFilters();
          }
          FArgs.MergeFrom(other.FArgs);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::Netmap.Operation) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            global::Netmap.SimpleFilters subBuilder = new global::Netmap.SimpleFilters();
            if (argsCase_ == ArgsOneofCase.FArgs) {
              subBuilder.MergeFrom(FArgs);
            }
            input.ReadMessage(subBuilder);
            FArgs = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Netmap.SelectorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      key_ = other.key_;
      f_ = other.f_ != null ? other.f_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "F" field.</summary>
    public const int FFieldNumber = 2;
    private global::Netmap.SimpleFilter f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Netmap.SimpleFilter F {
      get { return f_; }
      set {
        f_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(F, other.F)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (f_ != null) hash ^= F.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (f_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(F);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (f_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(F);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.f_ != null) {
        if (f_ == null) {
          F = new global::Netmap.SimpleFilter();
        }
        F.MergeFrom(other.F);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (f_ == null) {
              F = new global::Netmap.SimpleFilter();
            }
            input.ReadMessage(F);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
