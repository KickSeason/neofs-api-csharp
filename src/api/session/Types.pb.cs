// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: session/types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.Session {

  /// <summary>Holder for reflection information generated from session/types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for session/types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNzZXNzaW9uL3R5cGVzLnByb3RvEgdzZXNzaW9uGi1naXRodWIuY29tL2dv",
            "Z28vcHJvdG9idWYvZ29nb3Byb3RvL2dvZ28ucHJvdG8iPQoSVmVyaWZpY2F0",
            "aW9uSGVhZGVyEhEKCVB1YmxpY0tleRgBIAEoDBIUCgxLZXlTaWduYXR1cmUY",
            "AiABKAwi6wEKBVRva2VuEjEKBkhlYWRlchgBIAEoCzIbLnNlc3Npb24uVmVy",
            "aWZpY2F0aW9uSGVhZGVyQgTI3h8AEiAKB093bmVySUQYAiABKAxCD9reHwdP",
            "d25lcklEyN4fABISCgpGaXJzdEVwb2NoGAMgASgEEhEKCUxhc3RFcG9jaBgE",
            "IAEoBBIiCghPYmplY3RJRBgFIAMoDEIQ2t4fCE9iamVjdElEyN4fABIRCglT",
            "aWduYXR1cmUYBiABKAwSGwoCSUQYByABKAxCD9reHwdUb2tlbklEyN4fABIS",
            "CgpQdWJsaWNLZXlzGAggAygMQkBaJmdpdGh1Yi5jb20vbnNwY2MtZGV2L25l",
            "b2ZzLWFwaS9zZXNzaW9uqgIRTmVvRlMuQVBJLlNlc3Npb27Y4h4BYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Session.VerificationHeader), global::NeoFS.API.Session.VerificationHeader.Parser, new[]{ "PublicKey", "KeySignature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Session.Token), global::NeoFS.API.Session.Token.Parser, new[]{ "Header", "OwnerID", "FirstEpoch", "LastEpoch", "ObjectID", "Signature", "ID", "PublicKeys" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VerificationHeader : pb::IMessage<VerificationHeader> {
    private static readonly pb::MessageParser<VerificationHeader> _parser = new pb::MessageParser<VerificationHeader>(() => new VerificationHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerificationHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Session.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerificationHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerificationHeader(VerificationHeader other) : this() {
      publicKey_ = other.publicKey_;
      keySignature_ = other.keySignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerificationHeader Clone() {
      return new VerificationHeader(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// PublicKey is a session public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KeySignature" field.</summary>
    public const int KeySignatureFieldNumber = 2;
    private pb::ByteString keySignature_ = pb::ByteString.Empty;
    /// <summary>
    /// KeySignature is a session public key signature. Signed by trusted side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeySignature {
      get { return keySignature_; }
      set {
        keySignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerificationHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerificationHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (KeySignature != other.KeySignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (KeySignature.Length != 0) hash ^= KeySignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicKey);
      }
      if (KeySignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(KeySignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (KeySignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeySignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerificationHeader other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.KeySignature.Length != 0) {
        KeySignature = other.KeySignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            KeySignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User token granting rights for object manipulation
  /// </summary>
  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Session.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      ownerID_ = other.ownerID_;
      firstEpoch_ = other.firstEpoch_;
      lastEpoch_ = other.lastEpoch_;
      objectID_ = other.objectID_.Clone();
      signature_ = other.signature_;
      iD_ = other.iD_;
      publicKeys_ = other.publicKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "Header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::NeoFS.API.Session.VerificationHeader header_;
    /// <summary>
    /// Header carries verification data of session key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Session.VerificationHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "OwnerID" field.</summary>
    public const int OwnerIDFieldNumber = 2;
    private pb::ByteString ownerID_ = pb::ByteString.Empty;
    /// <summary>
    /// OwnerID is an owner of manipulation object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerID {
      get { return ownerID_; }
      set {
        ownerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FirstEpoch" field.</summary>
    public const int FirstEpochFieldNumber = 3;
    private ulong firstEpoch_;
    /// <summary>
    /// FirstEpoch is an initial epoch of token lifetime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstEpoch {
      get { return firstEpoch_; }
      set {
        firstEpoch_ = value;
      }
    }

    /// <summary>Field number for the "LastEpoch" field.</summary>
    public const int LastEpochFieldNumber = 4;
    private ulong lastEpoch_;
    /// <summary>
    /// LastEpoch is a last epoch of token lifetime
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastEpoch {
      get { return lastEpoch_; }
      set {
        lastEpoch_ = value;
      }
    }

    /// <summary>Field number for the "ObjectID" field.</summary>
    public const int ObjectIDFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_objectID_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> objectID_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// ObjectID is an object identifier of manipulation object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ObjectID {
      get { return objectID_; }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 6;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature is a token signature, signed by owner of manipulation object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 7;
    private pb::ByteString iD_ = pb::ByteString.Empty;
    /// <summary>
    /// ID is a token identifier. valid UUIDv4 represented in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 8;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_publicKeys_codec
        = pb::FieldCodec.ForBytes(66);
    private readonly pbc::RepeatedField<pb::ByteString> publicKeys_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// PublicKeys associated with owner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> PublicKeys {
      get { return publicKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (OwnerID != other.OwnerID) return false;
      if (FirstEpoch != other.FirstEpoch) return false;
      if (LastEpoch != other.LastEpoch) return false;
      if(!objectID_.Equals(other.objectID_)) return false;
      if (Signature != other.Signature) return false;
      if (ID != other.ID) return false;
      if(!publicKeys_.Equals(other.publicKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (OwnerID.Length != 0) hash ^= OwnerID.GetHashCode();
      if (FirstEpoch != 0UL) hash ^= FirstEpoch.GetHashCode();
      if (LastEpoch != 0UL) hash ^= LastEpoch.GetHashCode();
      hash ^= objectID_.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      hash ^= publicKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (OwnerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerID);
      }
      if (FirstEpoch != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FirstEpoch);
      }
      if (LastEpoch != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LastEpoch);
      }
      objectID_.WriteTo(output, _repeated_objectID_codec);
      if (Signature.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Signature);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ID);
      }
      publicKeys_.WriteTo(output, _repeated_publicKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (OwnerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerID);
      }
      if (FirstEpoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstEpoch);
      }
      if (LastEpoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastEpoch);
      }
      size += objectID_.CalculateSize(_repeated_objectID_codec);
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ID);
      }
      size += publicKeys_.CalculateSize(_repeated_publicKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::NeoFS.API.Session.VerificationHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.OwnerID.Length != 0) {
        OwnerID = other.OwnerID;
      }
      if (other.FirstEpoch != 0UL) {
        FirstEpoch = other.FirstEpoch;
      }
      if (other.LastEpoch != 0UL) {
        LastEpoch = other.LastEpoch;
      }
      objectID_.Add(other.objectID_);
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      publicKeys_.Add(other.publicKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::NeoFS.API.Session.VerificationHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            OwnerID = input.ReadBytes();
            break;
          }
          case 24: {
            FirstEpoch = input.ReadUInt64();
            break;
          }
          case 32: {
            LastEpoch = input.ReadUInt64();
            break;
          }
          case 42: {
            objectID_.AddEntriesFrom(input, _repeated_objectID_codec);
            break;
          }
          case 50: {
            Signature = input.ReadBytes();
            break;
          }
          case 58: {
            ID = input.ReadBytes();
            break;
          }
          case 66: {
            publicKeys_.AddEntriesFrom(input, _repeated_publicKeys_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
