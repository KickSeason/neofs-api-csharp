// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: accounting/types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.Accounting {

  /// <summary>Holder for reflection information generated from accounting/types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for accounting/types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZhY2NvdW50aW5nL3R5cGVzLnByb3RvEgphY2NvdW50aW5nGhVkZWNpbWFs",
            "L2RlY2ltYWwucHJvdG8aLWdpdGh1Yi5jb20vZ29nby9wcm90b2J1Zi9nb2dv",
            "cHJvdG8vZ29nby5wcm90byL/AQoHQWNjb3VudBIgCgdPd25lcklEGAEgASgM",
            "Qg/a3h8HT3duZXJJRMjeHwASDwoHQWRkcmVzcxgCIAEoCRIVCg1QYXJlbnRB",
            "ZGRyZXNzGAMgASgJEiUKC0FjdGl2ZUZ1bmRzGAQgASgLMhAuZGVjaW1hbC5E",
            "ZWNpbWFsEiwKCExpZmV0aW1lGAUgASgLMhQuYWNjb3VudGluZy5MaWZldGlt",
            "ZUIEyN4fABIqCgpMb2NrVGFyZ2V0GAYgASgLMhYuYWNjb3VudGluZy5Mb2Nr",
            "VGFyZ2V0EikKDExvY2tBY2NvdW50cxgHIAMoCzITLmFjY291bnRpbmcuQWNj",
            "b3VudCKQAQoKTG9ja1RhcmdldBI0Cg5XaXRoZHJhd1RhcmdldBgBIAEoCzIa",
            "LmFjY291bnRpbmcuV2l0aGRyYXdUYXJnZXRIABJCChVDb250YWluZXJDcmVh",
            "dGVUYXJnZXQYAiABKAsyIS5hY2NvdW50aW5nLkNvbnRhaW5lckNyZWF0ZVRh",
            "cmdldEgAQggKBlRhcmdldCI3CghCYWxhbmNlcxIrCghBY2NvdW50cxgBIAMo",
            "CzITLmFjY291bnRpbmcuQWNjb3VudEIEyN4fACJECgVQYXlJTxIPCgdCbG9j",
            "a0lEGAEgASgEEioKDFRyYW5zYWN0aW9ucxgCIAMoCzIOLmFjY291bnRpbmcu",
            "VHhCBMjeHwAigQEKCExpZmV0aW1lEjEKBHVuaXQYASABKA4yGS5hY2NvdW50",
            "aW5nLkxpZmV0aW1lLlVuaXRCCOLeHwRVbml0Eg0KBVZhbHVlGAIgASgDIjMK",
            "BFVuaXQSDQoJVW5saW1pdGVkEAASDgoKTmVvRlNFcG9jaBABEgwKCE5lb0Js",
            "b2NrEAIiugEKAlR4EisKBHR5cGUYASABKA4yEy5hY2NvdW50aW5nLlR4LlR5",
            "cGVCCOLeHwRUeXBlEgwKBEZyb20YAiABKAkSCgoCVG8YAyABKAkSIAoGQW1v",
            "dW50GAQgASgLMhAuZGVjaW1hbC5EZWNpbWFsEhIKClB1YmxpY0tleXMYBSAB",
            "KAwiNwoEVHlwZRILCgdVbmtub3duEAASDAoIV2l0aGRyYXcQARIJCgVQYXlJ",
            "TxACEgkKBUlubmVyEAMi1AIKClNldHRsZW1lbnQSDQoFRXBvY2gYASABKAQS",
            "LwoMVHJhbnNhY3Rpb25zGAIgAygLMhkuYWNjb3VudGluZy5TZXR0bGVtZW50",
            "LlR4GjgKCFJlY2VpdmVyEgoKAlRvGAEgASgJEiAKBkFtb3VudBgCIAEoCzIQ",
            "LmRlY2ltYWwuRGVjaW1hbBpCCglDb250YWluZXISGAoDQ0lEGAEgASgMQgva",
            "3h8DQ0lEyN4fABIbCgVTR0lEcxgCIAMoDEIM2t4fBFNHSUTI3h8AGocBCgJU",
            "eBIMCgRGcm9tGAEgASgJEjkKCUNvbnRhaW5lchgCIAEoCzIgLmFjY291bnRp",
            "bmcuU2V0dGxlbWVudC5Db250YWluZXJCBMjeHwASOAoJUmVjZWl2ZXJzGAMg",
            "AygLMh8uYWNjb3VudGluZy5TZXR0bGVtZW50LlJlY2VpdmVyQgTI3h8AIjEK",
            "FUNvbnRhaW5lckNyZWF0ZVRhcmdldBIYCgNDSUQYASABKAxCC9reHwNDSUTI",
            "3h8AIiAKDldpdGhkcmF3VGFyZ2V0Eg4KBkNoZXF1ZRgBIAEoCUJJWixnaXRo",
            "dWIuY29tL25zcGNjLWRldi9uZW9mcy1hcGktZ28vYWNjb3VudGluZ6oCFE5l",
            "b0ZTLkFQSS5BY2NvdW50aW5n2OIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NeoFS.API.Decimal.DecimalReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Account), global::NeoFS.API.Accounting.Account.Parser, new[]{ "OwnerID", "Address", "ParentAddress", "ActiveFunds", "Lifetime", "LockTarget", "LockAccounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.LockTarget), global::NeoFS.API.Accounting.LockTarget.Parser, new[]{ "WithdrawTarget", "ContainerCreateTarget" }, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Balances), global::NeoFS.API.Accounting.Balances.Parser, new[]{ "Accounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.PayIO), global::NeoFS.API.Accounting.PayIO.Parser, new[]{ "BlockID", "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Lifetime), global::NeoFS.API.Accounting.Lifetime.Parser, new[]{ "Unit", "Value" }, null, new[]{ typeof(global::NeoFS.API.Accounting.Lifetime.Types.Unit) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Tx), global::NeoFS.API.Accounting.Tx.Parser, new[]{ "Type", "From", "To", "Amount", "PublicKeys" }, null, new[]{ typeof(global::NeoFS.API.Accounting.Tx.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Settlement), global::NeoFS.API.Accounting.Settlement.Parser, new[]{ "Epoch", "Transactions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Settlement.Types.Receiver), global::NeoFS.API.Accounting.Settlement.Types.Receiver.Parser, new[]{ "To", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Settlement.Types.Container), global::NeoFS.API.Accounting.Settlement.Types.Container.Parser, new[]{ "CID", "SGIDs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.Settlement.Types.Tx), global::NeoFS.API.Accounting.Settlement.Types.Tx.Parser, new[]{ "From", "Container", "Receivers" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.ContainerCreateTarget), global::NeoFS.API.Accounting.ContainerCreateTarget.Parser, new[]{ "CID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Accounting.WithdrawTarget), global::NeoFS.API.Accounting.WithdrawTarget.Parser, new[]{ "Cheque" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      ownerID_ = other.ownerID_;
      address_ = other.address_;
      parentAddress_ = other.parentAddress_;
      activeFunds_ = other.activeFunds_ != null ? other.activeFunds_.Clone() : null;
      lifetime_ = other.lifetime_ != null ? other.lifetime_.Clone() : null;
      lockTarget_ = other.lockTarget_ != null ? other.lockTarget_.Clone() : null;
      lockAccounts_ = other.lockAccounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "OwnerID" field.</summary>
    public const int OwnerIDFieldNumber = 1;
    private pb::ByteString ownerID_ = pb::ByteString.Empty;
    /// <summary>
    /// OwnerID is a wallet address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerID {
      get { return ownerID_; }
      set {
        ownerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    /// Address is identifier of accounting record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ParentAddress" field.</summary>
    public const int ParentAddressFieldNumber = 3;
    private string parentAddress_ = "";
    /// <summary>
    /// ParentAddress is identifier of parent accounting record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentAddress {
      get { return parentAddress_; }
      set {
        parentAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActiveFunds" field.</summary>
    public const int ActiveFundsFieldNumber = 4;
    private global::NeoFS.API.Decimal.Decimal activeFunds_;
    /// <summary>
    /// ActiveFunds is amount of active (non locked) funds for account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Decimal.Decimal ActiveFunds {
      get { return activeFunds_; }
      set {
        activeFunds_ = value;
      }
    }

    /// <summary>Field number for the "Lifetime" field.</summary>
    public const int LifetimeFieldNumber = 5;
    private global::NeoFS.API.Accounting.Lifetime lifetime_;
    /// <summary>
    /// Lifetime is time until account is valid (used for lock accounts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.Lifetime Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "LockTarget" field.</summary>
    public const int LockTargetFieldNumber = 6;
    private global::NeoFS.API.Accounting.LockTarget lockTarget_;
    /// <summary>
    /// LockTarget is the purpose of lock funds (it might be withdraw or payment for storage)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.LockTarget LockTarget {
      get { return lockTarget_; }
      set {
        lockTarget_ = value;
      }
    }

    /// <summary>Field number for the "LockAccounts" field.</summary>
    public const int LockAccountsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NeoFS.API.Accounting.Account> _repeated_lockAccounts_codec
        = pb::FieldCodec.ForMessage(58, global::NeoFS.API.Accounting.Account.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.Accounting.Account> lockAccounts_ = new pbc::RepeatedField<global::NeoFS.API.Accounting.Account>();
    /// <summary>
    /// LockAccounts contains child accounts with locked funds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.Accounting.Account> LockAccounts {
      get { return lockAccounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerID != other.OwnerID) return false;
      if (Address != other.Address) return false;
      if (ParentAddress != other.ParentAddress) return false;
      if (!object.Equals(ActiveFunds, other.ActiveFunds)) return false;
      if (!object.Equals(Lifetime, other.Lifetime)) return false;
      if (!object.Equals(LockTarget, other.LockTarget)) return false;
      if(!lockAccounts_.Equals(other.lockAccounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerID.Length != 0) hash ^= OwnerID.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (ParentAddress.Length != 0) hash ^= ParentAddress.GetHashCode();
      if (activeFunds_ != null) hash ^= ActiveFunds.GetHashCode();
      if (lifetime_ != null) hash ^= Lifetime.GetHashCode();
      if (lockTarget_ != null) hash ^= LockTarget.GetHashCode();
      hash ^= lockAccounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerID);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (ParentAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentAddress);
      }
      if (activeFunds_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActiveFunds);
      }
      if (lifetime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Lifetime);
      }
      if (lockTarget_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LockTarget);
      }
      lockAccounts_.WriteTo(output, _repeated_lockAccounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerID);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (ParentAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentAddress);
      }
      if (activeFunds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveFunds);
      }
      if (lifetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lifetime);
      }
      if (lockTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockTarget);
      }
      size += lockAccounts_.CalculateSize(_repeated_lockAccounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.OwnerID.Length != 0) {
        OwnerID = other.OwnerID;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.ParentAddress.Length != 0) {
        ParentAddress = other.ParentAddress;
      }
      if (other.activeFunds_ != null) {
        if (activeFunds_ == null) {
          ActiveFunds = new global::NeoFS.API.Decimal.Decimal();
        }
        ActiveFunds.MergeFrom(other.ActiveFunds);
      }
      if (other.lifetime_ != null) {
        if (lifetime_ == null) {
          Lifetime = new global::NeoFS.API.Accounting.Lifetime();
        }
        Lifetime.MergeFrom(other.Lifetime);
      }
      if (other.lockTarget_ != null) {
        if (lockTarget_ == null) {
          LockTarget = new global::NeoFS.API.Accounting.LockTarget();
        }
        LockTarget.MergeFrom(other.LockTarget);
      }
      lockAccounts_.Add(other.lockAccounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerID = input.ReadBytes();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            ParentAddress = input.ReadString();
            break;
          }
          case 34: {
            if (activeFunds_ == null) {
              ActiveFunds = new global::NeoFS.API.Decimal.Decimal();
            }
            input.ReadMessage(ActiveFunds);
            break;
          }
          case 42: {
            if (lifetime_ == null) {
              Lifetime = new global::NeoFS.API.Accounting.Lifetime();
            }
            input.ReadMessage(Lifetime);
            break;
          }
          case 50: {
            if (lockTarget_ == null) {
              LockTarget = new global::NeoFS.API.Accounting.LockTarget();
            }
            input.ReadMessage(LockTarget);
            break;
          }
          case 58: {
            lockAccounts_.AddEntriesFrom(input, _repeated_lockAccounts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// LockTarget must be one of two options
  /// </summary>
  public sealed partial class LockTarget : pb::IMessage<LockTarget> {
    private static readonly pb::MessageParser<LockTarget> _parser = new pb::MessageParser<LockTarget>(() => new LockTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTarget(LockTarget other) : this() {
      switch (other.TargetCase) {
        case TargetOneofCase.WithdrawTarget:
          WithdrawTarget = other.WithdrawTarget.Clone();
          break;
        case TargetOneofCase.ContainerCreateTarget:
          ContainerCreateTarget = other.ContainerCreateTarget.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTarget Clone() {
      return new LockTarget(this);
    }

    /// <summary>Field number for the "WithdrawTarget" field.</summary>
    public const int WithdrawTargetFieldNumber = 1;
    /// <summary>
    /// WithdrawTarget used when user requested withdraw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.WithdrawTarget WithdrawTarget {
      get { return targetCase_ == TargetOneofCase.WithdrawTarget ? (global::NeoFS.API.Accounting.WithdrawTarget) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.WithdrawTarget;
      }
    }

    /// <summary>Field number for the "ContainerCreateTarget" field.</summary>
    public const int ContainerCreateTargetFieldNumber = 2;
    /// <summary>
    /// ContainerCreateTarget used when user requested creation of container
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.ContainerCreateTarget ContainerCreateTarget {
      get { return targetCase_ == TargetOneofCase.ContainerCreateTarget ? (global::NeoFS.API.Accounting.ContainerCreateTarget) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.ContainerCreateTarget;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "Target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      WithdrawTarget = 1,
      ContainerCreateTarget = 2,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WithdrawTarget, other.WithdrawTarget)) return false;
      if (!object.Equals(ContainerCreateTarget, other.ContainerCreateTarget)) return false;
      if (TargetCase != other.TargetCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetCase_ == TargetOneofCase.WithdrawTarget) hash ^= WithdrawTarget.GetHashCode();
      if (targetCase_ == TargetOneofCase.ContainerCreateTarget) hash ^= ContainerCreateTarget.GetHashCode();
      hash ^= (int) targetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetCase_ == TargetOneofCase.WithdrawTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(WithdrawTarget);
      }
      if (targetCase_ == TargetOneofCase.ContainerCreateTarget) {
        output.WriteRawTag(18);
        output.WriteMessage(ContainerCreateTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetCase_ == TargetOneofCase.WithdrawTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithdrawTarget);
      }
      if (targetCase_ == TargetOneofCase.ContainerCreateTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContainerCreateTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockTarget other) {
      if (other == null) {
        return;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.WithdrawTarget:
          if (WithdrawTarget == null) {
            WithdrawTarget = new global::NeoFS.API.Accounting.WithdrawTarget();
          }
          WithdrawTarget.MergeFrom(other.WithdrawTarget);
          break;
        case TargetOneofCase.ContainerCreateTarget:
          if (ContainerCreateTarget == null) {
            ContainerCreateTarget = new global::NeoFS.API.Accounting.ContainerCreateTarget();
          }
          ContainerCreateTarget.MergeFrom(other.ContainerCreateTarget);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::NeoFS.API.Accounting.WithdrawTarget subBuilder = new global::NeoFS.API.Accounting.WithdrawTarget();
            if (targetCase_ == TargetOneofCase.WithdrawTarget) {
              subBuilder.MergeFrom(WithdrawTarget);
            }
            input.ReadMessage(subBuilder);
            WithdrawTarget = subBuilder;
            break;
          }
          case 18: {
            global::NeoFS.API.Accounting.ContainerCreateTarget subBuilder = new global::NeoFS.API.Accounting.ContainerCreateTarget();
            if (targetCase_ == TargetOneofCase.ContainerCreateTarget) {
              subBuilder.MergeFrom(ContainerCreateTarget);
            }
            input.ReadMessage(subBuilder);
            ContainerCreateTarget = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Balances : pb::IMessage<Balances> {
    private static readonly pb::MessageParser<Balances> _parser = new pb::MessageParser<Balances>(() => new Balances());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Balances> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Balances() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Balances(Balances other) : this() {
      accounts_ = other.accounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Balances Clone() {
      return new Balances(this);
    }

    /// <summary>Field number for the "Accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NeoFS.API.Accounting.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::NeoFS.API.Accounting.Account.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.Accounting.Account> accounts_ = new pbc::RepeatedField<global::NeoFS.API.Accounting.Account>();
    /// <summary>
    /// Accounts contains multiple account snapshots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.Accounting.Account> Accounts {
      get { return accounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Balances);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Balances other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Balances other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PayIO : pb::IMessage<PayIO> {
    private static readonly pb::MessageParser<PayIO> _parser = new pb::MessageParser<PayIO>(() => new PayIO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayIO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayIO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayIO(PayIO other) : this() {
      blockID_ = other.blockID_;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayIO Clone() {
      return new PayIO(this);
    }

    /// <summary>Field number for the "BlockID" field.</summary>
    public const int BlockIDFieldNumber = 1;
    private ulong blockID_;
    /// <summary>
    /// BlockID contains id of the NEO block where withdraw or deposit
    /// call was invoked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockID {
      get { return blockID_; }
      set {
        blockID_ = value;
      }
    }

    /// <summary>Field number for the "Transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NeoFS.API.Accounting.Tx> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::NeoFS.API.Accounting.Tx.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.Accounting.Tx> transactions_ = new pbc::RepeatedField<global::NeoFS.API.Accounting.Tx>();
    /// <summary>
    /// Transactions contains all transactions that founded in block
    /// and used for PayIO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.Accounting.Tx> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayIO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayIO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockID != other.BlockID) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockID != 0UL) hash ^= BlockID.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BlockID);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockID);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayIO other) {
      if (other == null) {
        return;
      }
      if (other.BlockID != 0UL) {
        BlockID = other.BlockID;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockID = input.ReadUInt64();
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lifetime : pb::IMessage<Lifetime> {
    private static readonly pb::MessageParser<Lifetime> _parser = new pb::MessageParser<Lifetime>(() => new Lifetime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lifetime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lifetime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lifetime(Lifetime other) : this() {
      unit_ = other.unit_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lifetime Clone() {
      return new Lifetime(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private global::NeoFS.API.Accounting.Lifetime.Types.Unit unit_ = global::NeoFS.API.Accounting.Lifetime.Types.Unit.Unlimited;
    /// <summary>
    /// Unit describes how lifetime is measured in account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.Lifetime.Types.Unit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    /// Value describes how long lifetime will be valid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lifetime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lifetime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != global::NeoFS.API.Accounting.Lifetime.Types.Unit.Unlimited) hash ^= Unit.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unit != global::NeoFS.API.Accounting.Lifetime.Types.Unit.Unlimited) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Unit);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != global::NeoFS.API.Accounting.Lifetime.Types.Unit.Unlimited) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lifetime other) {
      if (other == null) {
        return;
      }
      if (other.Unit != global::NeoFS.API.Accounting.Lifetime.Types.Unit.Unlimited) {
        Unit = other.Unit;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = (global::NeoFS.API.Accounting.Lifetime.Types.Unit) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Lifetime message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Unit can be Unlimited, based on NeoFS epoch or Neo block
      /// </summary>
      public enum Unit {
        [pbr::OriginalName("Unlimited")] Unlimited = 0,
        [pbr::OriginalName("NeoFSEpoch")] NeoFsepoch = 1,
        [pbr::OriginalName("NeoBlock")] NeoBlock = 2,
      }

    }
    #endregion

  }

  public sealed partial class Tx : pb::IMessage<Tx> {
    private static readonly pb::MessageParser<Tx> _parser = new pb::MessageParser<Tx>(() => new Tx());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tx(Tx other) : this() {
      type_ = other.type_;
      from_ = other.from_;
      to_ = other.to_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      publicKeys_ = other.publicKeys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tx Clone() {
      return new Tx(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NeoFS.API.Accounting.Tx.Types.Type type_ = global::NeoFS.API.Accounting.Tx.Types.Type.Unknown;
    /// <summary>
    /// Type describes target of transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Accounting.Tx.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_ = "";
    /// <summary>
    /// From describes sender of funds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_ = "";
    /// <summary>
    /// To describes receiver of funds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private global::NeoFS.API.Decimal.Decimal amount_;
    /// <summary>
    /// Amount describes amount of funds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.Decimal.Decimal Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 5;
    private pb::ByteString publicKeys_ = pb::ByteString.Empty;
    /// <summary>
    /// PublicKeys contains public key of sender
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKeys {
      get { return publicKeys_; }
      set {
        publicKeys_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      if (PublicKeys != other.PublicKeys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::NeoFS.API.Accounting.Tx.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (PublicKeys.Length != 0) hash ^= PublicKeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::NeoFS.API.Accounting.Tx.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
      if (amount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Amount);
      }
      if (PublicKeys.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PublicKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::NeoFS.API.Accounting.Tx.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (PublicKeys.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tx other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::NeoFS.API.Accounting.Tx.Types.Type.Unknown) {
        Type = other.Type;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::NeoFS.API.Decimal.Decimal();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.PublicKeys.Length != 0) {
        PublicKeys = other.PublicKeys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::NeoFS.API.Accounting.Tx.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
          case 34: {
            if (amount_ == null) {
              Amount = new global::NeoFS.API.Decimal.Decimal();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 42: {
            PublicKeys = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Tx message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type can be withdrawal, payIO or inner
      /// </summary>
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Withdraw")] Withdraw = 1,
        [pbr::OriginalName("PayIO")] PayIo = 2,
        [pbr::OriginalName("Inner")] Inner = 3,
      }

    }
    #endregion

  }

  public sealed partial class Settlement : pb::IMessage<Settlement> {
    private static readonly pb::MessageParser<Settlement> _parser = new pb::MessageParser<Settlement>(() => new Settlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement(Settlement other) : this() {
      epoch_ = other.epoch_;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement Clone() {
      return new Settlement(this);
    }

    /// <summary>Field number for the "Epoch" field.</summary>
    public const int EpochFieldNumber = 1;
    private ulong epoch_;
    /// <summary>
    /// Epoch contains an epoch when settlement was accepted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    /// <summary>Field number for the "Transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NeoFS.API.Accounting.Settlement.Types.Tx> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::NeoFS.API.Accounting.Settlement.Types.Tx.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Tx> transactions_ = new pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Tx>();
    /// <summary>
    /// Transactions is a set of transactions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Tx> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Epoch != other.Epoch) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Epoch != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Epoch);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settlement other) {
      if (other == null) {
        return;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Epoch = input.ReadUInt64();
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Settlement message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Receiver : pb::IMessage<Receiver> {
        private static readonly pb::MessageParser<Receiver> _parser = new pb::MessageParser<Receiver>(() => new Receiver());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Receiver> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.Accounting.Settlement.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receiver() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receiver(Receiver other) : this() {
          to_ = other.to_;
          amount_ = other.amount_ != null ? other.amount_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Receiver Clone() {
          return new Receiver(this);
        }

        /// <summary>Field number for the "To" field.</summary>
        public const int ToFieldNumber = 1;
        private string to_ = "";
        /// <summary>
        /// To is the address of funds recipient
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string To {
          get { return to_; }
          set {
            to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private global::NeoFS.API.Decimal.Decimal amount_;
        /// <summary>
        /// Amount is the amount of funds that will be sent
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NeoFS.API.Decimal.Decimal Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Receiver);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Receiver other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (To != other.To) return false;
          if (!object.Equals(Amount, other.Amount)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (To.Length != 0) hash ^= To.GetHashCode();
          if (amount_ != null) hash ^= Amount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (To.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(To);
          }
          if (amount_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Amount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (To.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
          }
          if (amount_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Receiver other) {
          if (other == null) {
            return;
          }
          if (other.To.Length != 0) {
            To = other.To;
          }
          if (other.amount_ != null) {
            if (amount_ == null) {
              Amount = new global::NeoFS.API.Decimal.Decimal();
            }
            Amount.MergeFrom(other.Amount);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                To = input.ReadString();
                break;
              }
              case 18: {
                if (amount_ == null) {
                  Amount = new global::NeoFS.API.Decimal.Decimal();
                }
                input.ReadMessage(Amount);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Container : pb::IMessage<Container> {
        private static readonly pb::MessageParser<Container> _parser = new pb::MessageParser<Container>(() => new Container());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Container> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.Accounting.Settlement.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Container() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Container(Container other) : this() {
          cID_ = other.cID_;
          sGIDs_ = other.sGIDs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Container Clone() {
          return new Container(this);
        }

        /// <summary>Field number for the "CID" field.</summary>
        public const int CIDFieldNumber = 1;
        private pb::ByteString cID_ = pb::ByteString.Empty;
        /// <summary>
        /// CID is container identifier
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString CID {
          get { return cID_; }
          set {
            cID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "SGIDs" field.</summary>
        public const int SGIDsFieldNumber = 2;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_sGIDs_codec
            = pb::FieldCodec.ForBytes(18);
        private readonly pbc::RepeatedField<pb::ByteString> sGIDs_ = new pbc::RepeatedField<pb::ByteString>();
        /// <summary>
        /// SGIDs is a set of storage groups that successfully passed the audit
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> SGIDs {
          get { return sGIDs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Container);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Container other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CID != other.CID) return false;
          if(!sGIDs_.Equals(other.sGIDs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CID.Length != 0) hash ^= CID.GetHashCode();
          hash ^= sGIDs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CID.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(CID);
          }
          sGIDs_.WriteTo(output, _repeated_sGIDs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(CID);
          }
          size += sGIDs_.CalculateSize(_repeated_sGIDs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Container other) {
          if (other == null) {
            return;
          }
          if (other.CID.Length != 0) {
            CID = other.CID;
          }
          sGIDs_.Add(other.sGIDs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CID = input.ReadBytes();
                break;
              }
              case 18: {
                sGIDs_.AddEntriesFrom(input, _repeated_sGIDs_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Tx : pb::IMessage<Tx> {
        private static readonly pb::MessageParser<Tx> _parser = new pb::MessageParser<Tx>(() => new Tx());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tx> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.Accounting.Settlement.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tx() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tx(Tx other) : this() {
          from_ = other.from_;
          container_ = other.container_ != null ? other.container_.Clone() : null;
          receivers_ = other.receivers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tx Clone() {
          return new Tx(this);
        }

        /// <summary>Field number for the "From" field.</summary>
        public const int FromFieldNumber = 1;
        private string from_ = "";
        /// <summary>
        /// From is the address of the sender of funds
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string From {
          get { return from_; }
          set {
            from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Container" field.</summary>
        public const int ContainerFieldNumber = 2;
        private global::NeoFS.API.Accounting.Settlement.Types.Container container_;
        /// <summary>
        /// Container that successfully had passed the audit
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NeoFS.API.Accounting.Settlement.Types.Container Container {
          get { return container_; }
          set {
            container_ = value;
          }
        }

        /// <summary>Field number for the "Receivers" field.</summary>
        public const int ReceiversFieldNumber = 3;
        private static readonly pb::FieldCodec<global::NeoFS.API.Accounting.Settlement.Types.Receiver> _repeated_receivers_codec
            = pb::FieldCodec.ForMessage(26, global::NeoFS.API.Accounting.Settlement.Types.Receiver.Parser);
        private readonly pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Receiver> receivers_ = new pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Receiver>();
        /// <summary>
        /// Receivers is a set of addresses of funds recipients
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::NeoFS.API.Accounting.Settlement.Types.Receiver> Receivers {
          get { return receivers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tx);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tx other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (From != other.From) return false;
          if (!object.Equals(Container, other.Container)) return false;
          if(!receivers_.Equals(other.receivers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (From.Length != 0) hash ^= From.GetHashCode();
          if (container_ != null) hash ^= Container.GetHashCode();
          hash ^= receivers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (From.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(From);
          }
          if (container_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Container);
          }
          receivers_.WriteTo(output, _repeated_receivers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (From.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
          }
          if (container_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Container);
          }
          size += receivers_.CalculateSize(_repeated_receivers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tx other) {
          if (other == null) {
            return;
          }
          if (other.From.Length != 0) {
            From = other.From;
          }
          if (other.container_ != null) {
            if (container_ == null) {
              Container = new global::NeoFS.API.Accounting.Settlement.Types.Container();
            }
            Container.MergeFrom(other.Container);
          }
          receivers_.Add(other.receivers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                From = input.ReadString();
                break;
              }
              case 18: {
                if (container_ == null) {
                  Container = new global::NeoFS.API.Accounting.Settlement.Types.Container();
                }
                input.ReadMessage(Container);
                break;
              }
              case 26: {
                receivers_.AddEntriesFrom(input, _repeated_receivers_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ContainerCreateTarget : pb::IMessage<ContainerCreateTarget> {
    private static readonly pb::MessageParser<ContainerCreateTarget> _parser = new pb::MessageParser<ContainerCreateTarget>(() => new ContainerCreateTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainerCreateTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainerCreateTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainerCreateTarget(ContainerCreateTarget other) : this() {
      cID_ = other.cID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainerCreateTarget Clone() {
      return new ContainerCreateTarget(this);
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 1;
    private pb::ByteString cID_ = pb::ByteString.Empty;
    /// <summary>
    /// CID is container identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CID {
      get { return cID_; }
      set {
        cID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainerCreateTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainerCreateTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CID != other.CID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CID.Length != 0) hash ^= CID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainerCreateTarget other) {
      if (other == null) {
        return;
      }
      if (other.CID.Length != 0) {
        CID = other.CID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CID = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawTarget : pb::IMessage<WithdrawTarget> {
    private static readonly pb::MessageParser<WithdrawTarget> _parser = new pb::MessageParser<WithdrawTarget>(() => new WithdrawTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Accounting.TypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawTarget(WithdrawTarget other) : this() {
      cheque_ = other.cheque_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawTarget Clone() {
      return new WithdrawTarget(this);
    }

    /// <summary>Field number for the "Cheque" field.</summary>
    public const int ChequeFieldNumber = 1;
    private string cheque_ = "";
    /// <summary>
    /// Cheque is a string representation of cheque id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cheque {
      get { return cheque_; }
      set {
        cheque_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cheque != other.Cheque) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cheque.Length != 0) hash ^= Cheque.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cheque.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cheque);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cheque.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cheque);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawTarget other) {
      if (other == null) {
        return;
      }
      if (other.Cheque.Length != 0) {
        Cheque = other.Cheque;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cheque = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
