// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: storagegroup/types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.StorageGroup {

  /// <summary>Holder for reflection information generated from storagegroup/types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for storagegroup/types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhzdG9yYWdlZ3JvdXAvdHlwZXMucHJvdG8SDHN0b3JhZ2Vncm91cBotZ2l0",
            "aHViLmNvbS9nb2dvL3Byb3RvYnVmL2dvZ29wcm90by9nb2dvLnByb3RvIq4C",
            "CgxTdG9yYWdlR3JvdXASGgoSVmFsaWRhdGlvbkRhdGFTaXplGAEgASgEEiQK",
            "DlZhbGlkYXRpb25IYXNoGAIgASgMQgza3h8ESGFzaMjeHwASQwoIbGlmZXRp",
            "bWUYAyABKAsyIy5zdG9yYWdlZ3JvdXAuU3RvcmFnZUdyb3VwLkxpZmV0aW1l",
            "Qgzi3h8ITGlmZXRpbWUakAEKCExpZmV0aW1lEkAKBHVuaXQYASABKA4yKC5z",
            "dG9yYWdlZ3JvdXAuU3RvcmFnZUdyb3VwLkxpZmV0aW1lLlVuaXRCCOLeHwRV",
            "bml0Eg0KBVZhbHVlGAIgASgDIjMKBFVuaXQSDQoJVW5saW1pdGVkEAASDgoK",
            "TmVvRlNFcG9jaBABEgwKCFVuaXhUaW1lEAI6BJigHwBCTVouZ2l0aHViLmNv",
            "bS9uc3BjYy1kZXYvbmVvZnMtYXBpLWdvL3N0b3JhZ2Vncm91cKoCFk5lb0ZT",
            "LkFQSS5TdG9yYWdlR3JvdXDY4h4BYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.StorageGroup.StorageGroup), global::NeoFS.API.StorageGroup.StorageGroup.Parser, new[]{ "ValidationDataSize", "ValidationHash", "Lifetime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime), global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Parser, new[]{ "Unit", "Value" }, null, new[]{ typeof(global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StorageGroup : pb::IMessage<StorageGroup> {
    private static readonly pb::MessageParser<StorageGroup> _parser = new pb::MessageParser<StorageGroup>(() => new StorageGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.StorageGroup.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageGroup(StorageGroup other) : this() {
      validationDataSize_ = other.validationDataSize_;
      validationHash_ = other.validationHash_;
      lifetime_ = other.lifetime_ != null ? other.lifetime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageGroup Clone() {
      return new StorageGroup(this);
    }

    /// <summary>Field number for the "ValidationDataSize" field.</summary>
    public const int ValidationDataSizeFieldNumber = 1;
    private ulong validationDataSize_;
    /// <summary>
    /// ValidationDataSize is size of the all object's payloads included into storage group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ValidationDataSize {
      get { return validationDataSize_; }
      set {
        validationDataSize_ = value;
      }
    }

    /// <summary>Field number for the "ValidationHash" field.</summary>
    public const int ValidationHashFieldNumber = 2;
    private pb::ByteString validationHash_ = pb::ByteString.Empty;
    /// <summary>
    /// ValidationHash is homomorphic hash of all object's payloads included into storage group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidationHash {
      get { return validationHash_; }
      set {
        validationHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 3;
    private global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime lifetime_;
    /// <summary>
    /// Lifetime is time until storage group is valid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValidationDataSize != other.ValidationDataSize) return false;
      if (ValidationHash != other.ValidationHash) return false;
      if (!object.Equals(Lifetime, other.Lifetime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValidationDataSize != 0UL) hash ^= ValidationDataSize.GetHashCode();
      if (ValidationHash.Length != 0) hash ^= ValidationHash.GetHashCode();
      if (lifetime_ != null) hash ^= Lifetime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValidationDataSize != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ValidationDataSize);
      }
      if (ValidationHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ValidationHash);
      }
      if (lifetime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lifetime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValidationDataSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValidationDataSize);
      }
      if (ValidationHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidationHash);
      }
      if (lifetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lifetime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageGroup other) {
      if (other == null) {
        return;
      }
      if (other.ValidationDataSize != 0UL) {
        ValidationDataSize = other.ValidationDataSize;
      }
      if (other.ValidationHash.Length != 0) {
        ValidationHash = other.ValidationHash;
      }
      if (other.lifetime_ != null) {
        if (lifetime_ == null) {
          Lifetime = new global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime();
        }
        Lifetime.MergeFrom(other.Lifetime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ValidationDataSize = input.ReadUInt64();
            break;
          }
          case 18: {
            ValidationHash = input.ReadBytes();
            break;
          }
          case 26: {
            if (lifetime_ == null) {
              Lifetime = new global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime();
            }
            input.ReadMessage(Lifetime);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StorageGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Lifetime : pb::IMessage<Lifetime> {
        private static readonly pb::MessageParser<Lifetime> _parser = new pb::MessageParser<Lifetime>(() => new Lifetime());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Lifetime> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.StorageGroup.StorageGroup.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lifetime() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lifetime(Lifetime other) : this() {
          unit_ = other.unit_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Lifetime Clone() {
          return new Lifetime(this);
        }

        /// <summary>Field number for the "unit" field.</summary>
        public const int UnitFieldNumber = 1;
        private global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit unit_ = global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit.Unlimited;
        /// <summary>
        /// Unit is lifetime type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit Unit {
          get { return unit_; }
          set {
            unit_ = value;
          }
        }

        /// <summary>Field number for the "Value" field.</summary>
        public const int ValueFieldNumber = 2;
        private long value_;
        /// <summary>
        /// Value for lifetime
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Lifetime);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Lifetime other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Unit != other.Unit) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Unit != global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit.Unlimited) hash ^= Unit.GetHashCode();
          if (Value != 0L) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Unit != global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit.Unlimited) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Unit);
          }
          if (Value != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Unit != global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit.Unlimited) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
          }
          if (Value != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Lifetime other) {
          if (other == null) {
            return;
          }
          if (other.Unit != global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit.Unlimited) {
            Unit = other.Unit;
          }
          if (other.Value != 0L) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Unit = (global::NeoFS.API.StorageGroup.StorageGroup.Types.Lifetime.Types.Unit) input.ReadEnum();
                break;
              }
              case 16: {
                Value = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Lifetime message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Unit {
            /// <summary>
            /// Unlimited set if storage group always valid
            /// </summary>
            [pbr::OriginalName("Unlimited")] Unlimited = 0,
            /// <summary>
            /// NeoFSEpoch set if storage group is valid until lifetime NeoFS epoch
            /// </summary>
            [pbr::OriginalName("NeoFSEpoch")] NeoFsepoch = 1,
            /// <summary>
            /// UnixTime set if storage group is valid until lifetime unix timestamp
            /// </summary>
            [pbr::OriginalName("UnixTime")] UnixTime = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
