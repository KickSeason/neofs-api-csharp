// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service/meta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.Service {

  /// <summary>Holder for reflection information generated from service/meta.proto</summary>
  public static partial class MetaReflection {

    #region Descriptor
    /// <summary>File descriptor for service/meta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJzZXJ2aWNlL21ldGEucHJvdG8SB3NlcnZpY2UaLWdpdGh1Yi5jb20vZ29n",
            "by9wcm90b2J1Zi9nb2dvcHJvdG8vZ29nby5wcm90byJAChFSZXF1ZXN0TWV0",
            "YUhlYWRlchILCgNUVEwYASABKA0SDQoFRXBvY2gYAiABKAQSDwoHVmVyc2lv",
            "bhgDIAEoDUJAWiZnaXRodWIuY29tL25zcGNjLWRldi9uZW9mcy1hcGkvc2Vy",
            "dmljZaoCEU5lb0ZTLkFQSS5TZXJ2aWNl2OIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Service.RequestMetaHeader), global::NeoFS.API.Service.RequestMetaHeader.Parser, new[]{ "TTL", "Epoch", "Version" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// RequestMetaHeader contains information about request meta headers
  /// (should be embedded into message)
  /// </summary>
  public sealed partial class RequestMetaHeader : pb::IMessage<RequestMetaHeader> {
    private static readonly pb::MessageParser<RequestMetaHeader> _parser = new pb::MessageParser<RequestMetaHeader>(() => new RequestMetaHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestMetaHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Service.MetaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMetaHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMetaHeader(RequestMetaHeader other) : this() {
      tTL_ = other.tTL_;
      epoch_ = other.epoch_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMetaHeader Clone() {
      return new RequestMetaHeader(this);
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 1;
    private uint tTL_;
    /// <summary>
    /// TTL must be larger than zero, it decreased in every NeoFS Node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    /// <summary>Field number for the "Epoch" field.</summary>
    public const int EpochFieldNumber = 2;
    private ulong epoch_;
    /// <summary>
    /// Epoch for user can be empty, because node sets epoch to the actual value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    /// <summary>
    /// Version defines protocol version
    /// TODO: not used for now, should be implemented in future
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestMetaHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestMetaHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TTL != other.TTL) return false;
      if (Epoch != other.Epoch) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TTL != 0) hash ^= TTL.GetHashCode();
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TTL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TTL);
      }
      if (Epoch != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Epoch);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TTL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TTL);
      }
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestMetaHeader other) {
      if (other == null) {
        return;
      }
      if (other.TTL != 0) {
        TTL = other.TTL;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TTL = input.ReadUInt32();
            break;
          }
          case 16: {
            Epoch = input.ReadUInt64();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
