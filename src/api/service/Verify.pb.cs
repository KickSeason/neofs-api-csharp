// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service/verify.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NeoFS.API.Service {

  /// <summary>Holder for reflection information generated from service/verify.proto</summary>
  public static partial class VerifyReflection {

    #region Descriptor
    /// <summary>File descriptor for service/verify.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VerifyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRzZXJ2aWNlL3ZlcmlmeS5wcm90bxIHc2VydmljZRotZ2l0aHViLmNvbS9n",
            "b2dvL3Byb3RvYnVmL2dvZ29wcm90by9nb2dvLnByb3RvIokCChlSZXF1ZXN0",
            "VmVyaWZpY2F0aW9uSGVhZGVyEkAKClNpZ25hdHVyZXMYASADKAsyLC5zZXJ2",
            "aWNlLlJlcXVlc3RWZXJpZmljYXRpb25IZWFkZXIuU2lnbmF0dXJlGiIKBFNp",
            "Z24SDAoEU2lnbhgBIAEoDBIMCgRQZWVyGAIgASgMGoUBCglTaWduYXR1cmUS",
            "PwoEU2lnbhgBIAEoCzInLnNlcnZpY2UuUmVxdWVzdFZlcmlmaWNhdGlvbkhl",
            "YWRlci5TaWduQgjQ3h8ByN4fABI3CgZPcmlnaW4YAiABKAsyJy5zZXJ2aWNl",
            "LlJlcXVlc3RWZXJpZmljYXRpb25IZWFkZXIuU2lnbkJDWilnaXRodWIuY29t",
            "L25zcGNjLWRldi9uZW9mcy1hcGktZ28vc2VydmljZaoCEU5lb0ZTLkFQSS5T",
            "ZXJ2aWNl2OIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Service.RequestVerificationHeader), global::NeoFS.API.Service.RequestVerificationHeader.Parser, new[]{ "Signatures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign), global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign.Parser, new[]{ "Sign_", "Peer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature), global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature.Parser, new[]{ "Sign", "Origin" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// RequestVerificationHeader is a set of signatures of every NeoFS Node that processed request
  /// (should be embedded into message).
  /// </summary>
  public sealed partial class RequestVerificationHeader : pb::IMessage<RequestVerificationHeader> {
    private static readonly pb::MessageParser<RequestVerificationHeader> _parser = new pb::MessageParser<RequestVerificationHeader>(() => new RequestVerificationHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestVerificationHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NeoFS.API.Service.VerifyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestVerificationHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestVerificationHeader(RequestVerificationHeader other) : this() {
      signatures_ = other.signatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestVerificationHeader Clone() {
      return new RequestVerificationHeader(this);
    }

    /// <summary>Field number for the "Signatures" field.</summary>
    public const int SignaturesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(10, global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature.Parser);
    private readonly pbc::RepeatedField<global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature> signatures_ = new pbc::RepeatedField<global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature>();
    /// <summary>
    /// Signatures is a set of signatures of every passed NeoFS Node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NeoFS.API.Service.RequestVerificationHeader.Types.Signature> Signatures {
      get { return signatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestVerificationHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestVerificationHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!signatures_.Equals(other.signatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= signatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      signatures_.WriteTo(output, _repeated_signatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestVerificationHeader other) {
      if (other == null) {
        return;
      }
      signatures_.Add(other.signatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RequestVerificationHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Sign : pb::IMessage<Sign> {
        private static readonly pb::MessageParser<Sign> _parser = new pb::MessageParser<Sign>(() => new Sign());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sign> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.Service.RequestVerificationHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sign() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sign(Sign other) : this() {
          sign_ = other.sign_;
          peer_ = other.peer_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sign Clone() {
          return new Sign(this);
        }

        /// <summary>Field number for the "Sign" field.</summary>
        public const int Sign_FieldNumber = 1;
        private pb::ByteString sign_ = pb::ByteString.Empty;
        /// <summary>
        /// Sign is signature of the request or session key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Sign_ {
          get { return sign_; }
          set {
            sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Peer" field.</summary>
        public const int PeerFieldNumber = 2;
        private pb::ByteString peer_ = pb::ByteString.Empty;
        /// <summary>
        /// Peer is compressed public key used for signature.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Peer {
          get { return peer_; }
          set {
            peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sign);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sign other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sign_ != other.Sign_) return false;
          if (Peer != other.Peer) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Sign_.Length != 0) hash ^= Sign_.GetHashCode();
          if (Peer.Length != 0) hash ^= Peer.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Sign_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Sign_);
          }
          if (Peer.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Peer);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Sign_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sign_);
          }
          if (Peer.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Peer);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sign other) {
          if (other == null) {
            return;
          }
          if (other.Sign_.Length != 0) {
            Sign_ = other.Sign_;
          }
          if (other.Peer.Length != 0) {
            Peer = other.Peer;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Sign_ = input.ReadBytes();
                break;
              }
              case 18: {
                Peer = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Signature : pb::IMessage<Signature> {
        private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Signature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NeoFS.API.Service.RequestVerificationHeader.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature(Signature other) : this() {
          sign_ = other.sign_ != null ? other.sign_.Clone() : null;
          origin_ = other.origin_ != null ? other.origin_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Signature Clone() {
          return new Signature(this);
        }

        /// <summary>Field number for the "Sign" field.</summary>
        public const int SignFieldNumber = 1;
        private global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign sign_;
        /// <summary>
        /// Sign is a signature and public key of the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign Sign {
          get { return sign_; }
          set {
            sign_ = value;
          }
        }

        /// <summary>Field number for the "Origin" field.</summary>
        public const int OriginFieldNumber = 2;
        private global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign origin_;
        /// <summary>
        /// Origin used for requests, when trusted node changes it and re-sign with session key.
        /// If session key used for signature request, then Origin should contain
        /// public key of user and signed session key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign Origin {
          get { return origin_; }
          set {
            origin_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Signature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Signature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Sign, other.Sign)) return false;
          if (!object.Equals(Origin, other.Origin)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (sign_ != null) hash ^= Sign.GetHashCode();
          if (origin_ != null) hash ^= Origin.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (sign_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Sign);
          }
          if (origin_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Origin);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (sign_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sign);
          }
          if (origin_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Signature other) {
          if (other == null) {
            return;
          }
          if (other.sign_ != null) {
            if (sign_ == null) {
              Sign = new global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign();
            }
            Sign.MergeFrom(other.Sign);
          }
          if (other.origin_ != null) {
            if (origin_ == null) {
              Origin = new global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign();
            }
            Origin.MergeFrom(other.Origin);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (sign_ == null) {
                  Sign = new global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign();
                }
                input.ReadMessage(Sign);
                break;
              }
              case 18: {
                if (origin_ == null) {
                  Origin = new global::NeoFS.API.Service.RequestVerificationHeader.Types.Sign();
                }
                input.ReadMessage(Origin);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
