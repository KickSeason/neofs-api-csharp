// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: state/service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NeoFS.API.State {
  /// <summary>
  /// Status service provides node's healthcheck and status info
  /// </summary>
  public static partial class Status
  {
    static readonly string __ServiceName = "state.Status";

    static readonly grpc::Marshaller<global::NeoFS.API.State.NetmapRequest> __Marshaller_state_NetmapRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.NetmapRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.Bootstrap.SpreadMap> __Marshaller_bootstrap_SpreadMap = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.Bootstrap.SpreadMap.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.MetricsRequest> __Marshaller_state_MetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.MetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.MetricsResponse> __Marshaller_state_MetricsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.MetricsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.HealthRequest> __Marshaller_state_HealthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.HealthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.HealthResponse> __Marshaller_state_HealthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.HealthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.DumpRequest> __Marshaller_state_DumpRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.DumpRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.DumpResponse> __Marshaller_state_DumpResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.DumpResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.DumpVarsRequest> __Marshaller_state_DumpVarsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.DumpVarsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NeoFS.API.State.DumpVarsResponse> __Marshaller_state_DumpVarsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NeoFS.API.State.DumpVarsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NeoFS.API.State.NetmapRequest, global::NeoFS.API.Bootstrap.SpreadMap> __Method_Netmap = new grpc::Method<global::NeoFS.API.State.NetmapRequest, global::NeoFS.API.Bootstrap.SpreadMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Netmap",
        __Marshaller_state_NetmapRequest,
        __Marshaller_bootstrap_SpreadMap);

    static readonly grpc::Method<global::NeoFS.API.State.MetricsRequest, global::NeoFS.API.State.MetricsResponse> __Method_Metrics = new grpc::Method<global::NeoFS.API.State.MetricsRequest, global::NeoFS.API.State.MetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Metrics",
        __Marshaller_state_MetricsRequest,
        __Marshaller_state_MetricsResponse);

    static readonly grpc::Method<global::NeoFS.API.State.HealthRequest, global::NeoFS.API.State.HealthResponse> __Method_HealthCheck = new grpc::Method<global::NeoFS.API.State.HealthRequest, global::NeoFS.API.State.HealthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HealthCheck",
        __Marshaller_state_HealthRequest,
        __Marshaller_state_HealthResponse);

    static readonly grpc::Method<global::NeoFS.API.State.DumpRequest, global::NeoFS.API.State.DumpResponse> __Method_DumpConfig = new grpc::Method<global::NeoFS.API.State.DumpRequest, global::NeoFS.API.State.DumpResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DumpConfig",
        __Marshaller_state_DumpRequest,
        __Marshaller_state_DumpResponse);

    static readonly grpc::Method<global::NeoFS.API.State.DumpVarsRequest, global::NeoFS.API.State.DumpVarsResponse> __Method_DumpVars = new grpc::Method<global::NeoFS.API.State.DumpVarsRequest, global::NeoFS.API.State.DumpVarsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DumpVars",
        __Marshaller_state_DumpVarsRequest,
        __Marshaller_state_DumpVarsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NeoFS.API.State.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Status</summary>
    public partial class StatusClient : grpc::ClientBase<StatusClient>
    {
      /// <summary>Creates a new client for Status</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StatusClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Status that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StatusClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StatusClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StatusClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Netmap request allows to receive current [bootstrap.SpreadMap](bootstrap.md#bootstrap.SpreadMap)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.Bootstrap.SpreadMap Netmap(global::NeoFS.API.State.NetmapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Netmap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Netmap request allows to receive current [bootstrap.SpreadMap](bootstrap.md#bootstrap.SpreadMap)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.Bootstrap.SpreadMap Netmap(global::NeoFS.API.State.NetmapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Netmap, null, options, request);
      }
      /// <summary>
      /// Netmap request allows to receive current [bootstrap.SpreadMap](bootstrap.md#bootstrap.SpreadMap)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.Bootstrap.SpreadMap> NetmapAsync(global::NeoFS.API.State.NetmapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NetmapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Netmap request allows to receive current [bootstrap.SpreadMap](bootstrap.md#bootstrap.SpreadMap)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.Bootstrap.SpreadMap> NetmapAsync(global::NeoFS.API.State.NetmapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Netmap, null, options, request);
      }
      /// <summary>
      /// Metrics request allows to receive metrics in prometheus format
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.MetricsResponse Metrics(global::NeoFS.API.State.MetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Metrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Metrics request allows to receive metrics in prometheus format
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.MetricsResponse Metrics(global::NeoFS.API.State.MetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Metrics, null, options, request);
      }
      /// <summary>
      /// Metrics request allows to receive metrics in prometheus format
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.MetricsResponse> MetricsAsync(global::NeoFS.API.State.MetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Metrics request allows to receive metrics in prometheus format
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.MetricsResponse> MetricsAsync(global::NeoFS.API.State.MetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Metrics, null, options, request);
      }
      /// <summary>
      /// HealthCheck request allows to check health status of the node.
      /// If node unhealthy field Status would contains detailed info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.HealthResponse HealthCheck(global::NeoFS.API.State.HealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HealthCheck request allows to check health status of the node.
      /// If node unhealthy field Status would contains detailed info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.HealthResponse HealthCheck(global::NeoFS.API.State.HealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>
      /// HealthCheck request allows to check health status of the node.
      /// If node unhealthy field Status would contains detailed info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.HealthResponse> HealthCheckAsync(global::NeoFS.API.State.HealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HealthCheck request allows to check health status of the node.
      /// If node unhealthy field Status would contains detailed info.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.HealthResponse> HealthCheckAsync(global::NeoFS.API.State.HealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>
      /// DumpConfig request allows dumping settings for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.DumpResponse DumpConfig(global::NeoFS.API.State.DumpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DumpConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DumpConfig request allows dumping settings for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.DumpResponse DumpConfig(global::NeoFS.API.State.DumpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DumpConfig, null, options, request);
      }
      /// <summary>
      /// DumpConfig request allows dumping settings for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.DumpResponse> DumpConfigAsync(global::NeoFS.API.State.DumpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DumpConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DumpConfig request allows dumping settings for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.DumpResponse> DumpConfigAsync(global::NeoFS.API.State.DumpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DumpConfig, null, options, request);
      }
      /// <summary>
      /// DumpVars returns debug variables for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.DumpVarsResponse DumpVars(global::NeoFS.API.State.DumpVarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DumpVars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DumpVars returns debug variables for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NeoFS.API.State.DumpVarsResponse DumpVars(global::NeoFS.API.State.DumpVarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DumpVars, null, options, request);
      }
      /// <summary>
      /// DumpVars returns debug variables for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.DumpVarsResponse> DumpVarsAsync(global::NeoFS.API.State.DumpVarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DumpVarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DumpVars returns debug variables for the current node.
      /// To permit access, used server config options.
      /// The request should be signed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NeoFS.API.State.DumpVarsResponse> DumpVarsAsync(global::NeoFS.API.State.DumpVarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DumpVars, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StatusClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StatusClient(configuration);
      }
    }

  }
}
#endregion
